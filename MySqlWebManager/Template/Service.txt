using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Web.Mvc;
using System.Text;
using Ninject;
<0><1>
<2>
{
    public class Service<T> : IDisposable, IService<T> where T : class
    {
        [Inject]
        protected IRepository<T> repository { get; set; }

        public T Get(object instanceId)
        {
            return repository.Get(instanceId);
        }

        public IQueryable<T> Get(Expression<Func<T, bool>> filter = null, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null, string includeProperties = "", bool paged = false, int pageIndex = 1, int pageSize = 20)
        {
            return repository.Get(filter, orderBy, includeProperties, paged, pageIndex, pageSize);
        }

        public IEnumerable<T> GetWithRawSql(string query, params object[] parameters)
        {
            return repository.GetWithRawSql(query, parameters);
        }

        public T GetWithIndependent(object instanceId)
        {
            return repository.GetWithIndependent(instanceId);
        }

        public IQueryable<T> GetWithIndependent(Expression<Func<T, bool>> filter = null, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null, string includeProperties = "", bool paged = false, int pageIndex = 1, int pageSize = 20)
        {
            return repository.GetWithIndependent(filter, orderBy, includeProperties, paged, pageIndex, pageSize);
        }

        public Int64 Count(Expression<Func<T, bool>> filter = null)
        {
            return Get(filter).Count();
        }

        public void Add(T instance)
        {
            repository.Add(instance);
        }

        public void Update(T instance)
        {
            repository.Update(instance);
        }

        public void Delete(T instance)
        {
            repository.Delete(instance);
        }

        public void Delete(object instanceId)
        {
            Delete(Get(instanceId));
        }

        public void Delete(Expression<Func<T, bool>> filter = null)
        {
            foreach (T instance in Get(filter).AsEnumerable())
            {
                Delete(instance);
            }
        }

        public List<SelectListItem> GetSelectListItems(string valueField, string textField, string selectedValue, Expression<Func<T, bool>> filter = null, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy = null)
        {
            Type type = typeof(T);
            IRepository<T> ry = new Repository<T>();
            List<T> datas= ry.GetWithIndependent(filter, orderBy).ToList();
            List<SelectListItem> listItems = datas.Select(t => new SelectListItem { Text = type.GetProperty(textField).GetValue(t, null).ToString(), Value = type.GetProperty(valueField).GetValue(t, null).ToString(), Selected = type.GetProperty(valueField).GetValue(t, null).ToString() == selectedValue ? true : false }).ToList();
            return listItems;
        } 

        public void Save()
        {
            repository.Save();
        }

        private bool hasDisposed = false;
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        protected virtual void DisposeManagedResources()
        {
        }
        protected virtual void DisposeUnmanagedResources()
        {
        }
        protected virtual void Dispose(bool disposing)
        {
            if (!hasDisposed)
            {
                if (disposing)
                {
                    // TODO: 在这里释放托管资源
                    ((IDisposable)repository).Dispose();
                    DisposeManagedResources();
                }
                // TODO: 在这里释放非托管资源
                DisposeUnmanagedResources();
                hasDisposed = true;
            }
        }
        ~Service()
        {
            Dispose(false);
        }
    }
}